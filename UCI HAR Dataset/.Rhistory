list[2]
list[3]
list[4]
list[5]
data_highnonOECD=data41[data41$Income.Group==list[5],]
mean(data_highnonOECD[,2])
new_data=data41
cut(new_data[,2],breaks=quantile(new_data[,2]))
meow<-cut(new_data[,2],breaks=quantile(new_data[,2]))
new_data[,2][189]
?quantile
meow<-cut(new_data[,2],breaks=quantile(new_data[,2],probs=c(0.2,0.4,0.6,0.8,1)))
meow
meow<-cut(new_data[,2],breaks=quantile(new_data[,2],probs=c(0,0.2,0.4,0.6,0.8)))
meow
meow<-cut(new_data[,2],breaks=quantile(new_data[,2],probs=c(0,0.2,0.4,0.6,0.8,1)))
meow
table(meow)
37+38+37+38+38
?cut2
install.packages("gmisc")
install.packages("Gmisc")
?cut2
install.packages("Gmisc")
?cut2
install.packages("Hmisc")
?cut2
??cut2
install.packages("Hmisc")
?cut2
cut2
install.packages("Hmisc",source=TRUE)
?install.packages
tar: Failed to set default locale
tar: Failed to set default locale
install.packages("Hmisc")
library("Hmisc")
?cut2
cut2(new_data[,2],g=5)
table(meow)
37+38+37+38+38
meow<-cut2(new_data[,2],g=5)
length(meow)
table(meow)
38+38+38+38+37
View(new_data)
new_data2<-new_data[151:189,]
View(new_data2)
new_data2<-new_data[152:189,]
View(new_data2)
summary(new_data2["Income.Group"])
getwd()
setwd("~/Desktop/clean data/Getting-and-Cleaning-Data")
testData <- read.table("./UCI_HAR_Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI_HAR_Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI_HAR_Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI_HAR_Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI_HAR_Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI_HAR_Dataset/train/subject_train.txt",header=FALSE)
getwd()
list.files()
testData <- read.table("./UCI_HAR_Dataset/test/X_test.txt",header=FALSE)
setwd("~/")
setwd("~/Desktop/clean data/Getting-and-Cleaning-Data/UCI HAR Dataset")
setwd("~/Desktop/clean data/Getting-and-Cleaning-Data")
testData <- read.table("./UCI_HAR_Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI_HAR_Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI_HAR_Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI_HAR_Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI_HAR_Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI_HAR_Dataset/train/subject_train.txt",header=FALSE)
View(testData_act)
View(testData_act)
View(testData)
testData <- read.table("./UCI_HAR_Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI_HAR_Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI_HAR_Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI_HAR_Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI_HAR_Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI_HAR_Dataset/train/subject_train.txt",header=FALSE)
activities <- read.table("./UCI_HAR_Dataset/activity_labels.txt",header=FALSE,colClasses="character")
View(activities)
testData_act$V1
?factor
testData_act$V1 <- factor(testData_act$V1,levels=activities$V1,labels=activities$V2)
View(testData_act)
trainData_act$V1 <- factor(trainData_act$V1,levels=activities$V1,labels=activities$V2)
View(trainData_act)
features <- read.table("./UCI_HAR_Dataset/features.txt",header=FALSE,colClasses="character")
View(features)
colnames(testData)<-features$V2
colnames(trainData)<-features$V2
colnames(testData_act)<-c("Activity")
colnames(trainData_act)<-c("Activity")
colnames(testData_sub)<-c("Subject")
colnames(trainData_sub)<-c("Subject")
testData<-cbind(testData,testData_act)
testData<-cbind(testData,testData_sub)
trainData<-cbind(trainData,trainData_act)
trainData<-cbind(trainData,trainData_sub)
bigData<-rbind(testData,trainData)
bigData_mean<-sapply(bigData,mean,na.rm=TRUE)
bigData_sd<-sapply(bigData,sd,na.rm=TRUE)
DT <- data.table(bigData)
tidy<-DT[,lapply(.SD,mean),by="Activity,Subject"]
View(DT)
View(tidy)
source("run_analysis.R")
?write.table
write.table(tidy.txt)
write.table(tidy_data,"tidy_data.txt")
tidy_data<-DT[,lapply(.SD,mean),by="Activity,Subject"]
write.table(tidy_data,"tidy_data.txt")
features$V2
write.table(tidy_data,"tidy_data.txt")
library(data.table)
#set the current working directory
source("run_analysis.R")
#base step
#read in and load test, training sets and the activities
testData <- read.table("./UCI_HAR_Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI_HAR_Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI_HAR_Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI_HAR_Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI_HAR_Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI_HAR_Dataset/train/subject_train.txt",header=FALSE)
#step 3
#Uses descriptive activity names to name the activities in the data set
activities_labels <- read.table("./UCI_HAR_Dataset/activity_labels.txt",header=FALSE,colClasses="character")
testData_act$V1 <- factor(testData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
trainData_act$V1 <- factor(trainData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
#step 4
#Appropriately labels the data set with descriptive activity names.
features <- read.table("./UCI_HAR_Dataset/features.txt",header=FALSE,colClasses="character")
colnames(testData)<-features$V2
colnames(trainData)<-features$V2
colnames(testData_act)<-c("Activity")
colnames(trainData_act)<-c("Activity")
colnames(testData_sub)<-c("Subject")
colnames(trainData_sub)<-c("Subject")
#step 1
#Merges the training and the test sets to create one data set.
testData<-cbind(testData,testData_act)
testData<-cbind(testData,testData_sub)
trainData<-cbind(trainData,trainData_act)
trainData<-cbind(trainData,trainData_sub)
finalData<-rbind(testData,trainData)
#step 2
#Extracts only the measurements on the mean and standard deviation for each measurement.
Data_mean<-sapply(finalData,mean,na.rm=TRUE)
Data_sd<-sapply(finalData,sd,na.rm=TRUE)
#step 5
#Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
DT <- data.table(finalData)
tidy_data<-DT[,lapply(.SD,mean),by="Activity,Subject"]
write.table(tidy_data,"tidy_data.txt")
View(tidy_data)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
train.x<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
test.x<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
train.y<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
test.y<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
Subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
Subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
activity_lables<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
features<-read.table("./data/UCI HAR Dataset/features.txt")
#----------------Merges the training and the test sets to create one data set.
all.x<-rbind(train.x,test.x)
#----------------Extracts only the measurements on the mean and standard deviation for each measurement.
colnames(all.x) <- c(as.character(features[,2]))
Mean<-grep("mean()",colnames(all.x),fixed=TRUE)
SD<-grep("std()",colnames(all.x),fixed=TRUE)
MeanSD<-all.x[,c(Mean,SD)]
#----------------Uses descriptive activity names to name the activities in the data set.
all.y<-rbind(train.y,test.y)
all.activity<-cbind(all.y,MeanSD)
colnames(all.activity)[1] <- "Activity"
#----------------Appropriately labels the data set with descriptive activity names.
activity_lables[,2]<-as.character(activity_lables[,2])
for(i in 1:length(all.activity[,1])){
all.activity[i,1]<-activity_lables[all.activity[i,1],2]
}
#----------------Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
Subject_all<-rbind(Subject_train,Subject_test)
all<-cbind(Subject_all,all.activity)
colnames(all)[1] <- "Subject"
Tidy <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 4:ncol(all)){
Tidy[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
}
colnames(Tidy)[3:ncol(Tidy)] <- colnames(MeanSD)
write.table(Tidy, file = "FinalData.txt")
train.x<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
test.x<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
train.y<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
test.y<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
Subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
Subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
activity_lables<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
features<-read.table("./data/UCI HAR Dataset/features.txt")
library(data.table)
#set the current working directory
source("run_analysis.R")
#base step
#read in and load test, training sets and the activities
testData <- read.table("./UCI HAR Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI HAR Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI HAR Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI HAR Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI HAR Dataset/train/subject_train.txt",header=FALSE)
#step 3
#Uses descriptive activity names to name the activities in the data set
activities_labels <- read.table("./UCI_HAR_Dataset/activity_labels.txt",header=FALSE,colClasses="character")
testData_act$V1 <- factor(testData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
trainData_act$V1 <- factor(trainData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
#step 4
#Appropriately labels the data set with descriptive activity names.
features <- read.table("./UCI_HAR_Dataset/features.txt",header=FALSE,colClasses="character")
colnames(testData)<-features$V2
colnames(trainData)<-features$V2
colnames(testData_act)<-c("Activity")
colnames(trainData_act)<-c("Activity")
colnames(testData_sub)<-c("Subject")
colnames(trainData_sub)<-c("Subject")
#step 1
#Merges the training and the test sets to create one data set.
testData<-cbind(testData,testData_act)
testData<-cbind(testData,testData_sub)
trainData<-cbind(trainData,trainData_act)
trainData<-cbind(trainData,trainData_sub)
finalData<-rbind(testData,trainData)
#step 2
#Extracts only the measurements on the mean and standard deviation for each measurement.
Data_mean<-sapply(finalData,mean,na.rm=TRUE)
Data_sd<-sapply(finalData,sd,na.rm=TRUE)
#step 5
#Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
DT <- data.table(finalData)
tidy_data<-DT[,lapply(.SD,mean),by="Activity,Subject"]
write.table(tidy_data,"tidy_data.txt")
View(tidy_data)
train.x<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
test.x<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
train.y<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
test.y<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
Subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
Subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
activity_lables<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
features<-read.table("./data/UCI HAR Dataset/features.txt")
#----------------Merges the training and the test sets to create one data set.
all.x<-rbind(train.x,test.x)
#----------------Extracts only the measurements on the mean and standard deviation for each measurement.
colnames(all.x) <- c(as.character(features[,2]))
Mean<-grep("mean()",colnames(all.x),fixed=TRUE)
SD<-grep("std()",colnames(all.x),fixed=TRUE)
MeanSD<-all.x[,c(Mean,SD)]
#----------------Uses descriptive activity names to name the activities in the data set.
all.y<-rbind(train.y,test.y)
all.activity<-cbind(all.y,MeanSD)
colnames(all.activity)[1] <- "Activity"
#----------------Appropriately labels the data set with descriptive activity names.
activity_lables[,2]<-as.character(activity_lables[,2])
for(i in 1:length(all.activity[,1])){
all.activity[i,1]<-activity_lables[all.activity[i,1],2]
}
#----------------Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
Subject_all<-rbind(Subject_train,Subject_test)
all<-cbind(Subject_all,all.activity)
colnames(all)[1] <- "Subject"
Tidy <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 4:ncol(all)){
Tidy[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
}
colnames(Tidy)[3:ncol(Tidy)] <- colnames(MeanSD)
write.table(Tidy, file = "FinalData.txt")
train.x<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.x<-read.table("./UCI HAR Dataset/train/X_train.txt")
test.x<-read.table("./UCI HAR Dataset/test/X_test.txt")
train.y<-read.table("./UCI HAR Dataset/train/y_train.txt")
test.y<-read.table("./UCI HAR Dataset/test/y_test.txt")
Subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
Subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
activity_lables<-read.table("./UCI HAR Dataset/activity_labels.txt")
features<-read.table("./UCI HAR Dataset/features.txt")
#----------------Merges the training and the test sets to create one data set.
all.x<-rbind(train.x,test.x)
#----------------Extracts only the measurements on the mean and standard deviation for each measurement.
colnames(all.x) <- c(as.character(features[,2]))
Mean<-grep("mean()",colnames(all.x),fixed=TRUE)
SD<-grep("std()",colnames(all.x),fixed=TRUE)
MeanSD<-all.x[,c(Mean,SD)]
#----------------Uses descriptive activity names to name the activities in the data set.
all.y<-rbind(train.y,test.y)
all.activity<-cbind(all.y,MeanSD)
colnames(all.activity)[1] <- "Activity"
#----------------Appropriately labels the data set with descriptive activity names.
activity_lables[,2]<-as.character(activity_lables[,2])
for(i in 1:length(all.activity[,1])){
all.activity[i,1]<-activity_lables[all.activity[i,1],2]
}
#----------------Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
Subject_all<-rbind(Subject_train,Subject_test)
all<-cbind(Subject_all,all.activity)
colnames(all)[1] <- "Subject"
Tidy <- aggregate( all[,3] ~ Subject+Activity, data = all, FUN= "mean" )
for(i in 4:ncol(all)){
Tidy[,i] <- aggregate( all[,i] ~ Subject+Activity, data = all, FUN= "mean" )[,3]
}
colnames(Tidy)[3:ncol(Tidy)] <- colnames(MeanSD)
write.table(Tidy, file = "FinalData.txt")
View(Tidy)
View(finalData)
library(data.table)
#set the current working directory
source("run_analysis.R")
#base step
#read in and load test, training sets and the activities
testData <- read.table("./UCI HAR Dataset/test/X_test.txt",header=FALSE)
testData_act <- read.table("./UCI HAR Dataset/test/y_test.txt",header=FALSE)
testData_sub <- read.table("./UCI HAR Dataset/test/subject_test.txt",header=FALSE)
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt",header=FALSE)
trainData_act <- read.table("./UCI HAR Dataset/train/y_train.txt",header=FALSE)
trainData_sub <- read.table("./UCI HAR Dataset/train/subject_train.txt",header=FALSE)
#step 3
#Uses descriptive activity names to name the activities in the data set
activities_labels <- read.table("./UCI HAR Dataset/activity_labels.txt",header=FALSE,colClasses="character")
testData_act$V1 <- factor(testData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
trainData_act$V1 <- factor(trainData_act$V1,levels=activities_labels$V1,labels=activities_labels$V2)
#step 4
#Appropriately labels the data set with descriptive activity names.
features <- read.table("./UCI HAR Dataset/features.txt",header=FALSE,colClasses="character")
colnames(testData)<-features$V2
colnames(trainData)<-features$V2
colnames(testData_act)<-c("Activity")
colnames(trainData_act)<-c("Activity")
colnames(testData_sub)<-c("Subject")
colnames(trainData_sub)<-c("Subject")
#step 1
#Merges the training and the test sets to create one data set.
testData<-cbind(testData,testData_act)
testData<-cbind(testData,testData_sub)
trainData<-cbind(trainData,trainData_act)
trainData<-cbind(trainData,trainData_sub)
finalData<-rbind(testData,trainData)
#step 2
#Extracts only the measurements on the mean and standard deviation for each measurement.
Data_mean<-sapply(finalData,mean,na.rm=TRUE)
Data_sd<-sapply(finalData,sd,na.rm=TRUE)
#step 5
#Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
DT <- data.table(finalData)
tidy_data<-DT[,lapply(.SD,mean),by="Activity,Subject"]
write.table(tidy_data,"tidy_data.txt")
View(tidy_data)
57-33
24/33
# Reading test data
test_data <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# Reading train data
train_data <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
# Reading labels and features
activity_labels <- read.table("activity_labels.txt")
features <- read.table("features.txt")
# Transposing rows of features to columns and assigning second row to header_names
header_names<-t(features)
header_names<-header_names[2,]
# Assiging header_names to both tables
names(test_data)<-c(header_names)
names(train_data)<-c(header_names)
# Assigning activity and subject_name as headers to the proper tables
names(y_test)<-"activity"
names(y_train)<-"activity"
names(subject_test)<-"subject_name"
names(subject_train)<-"subject_name"
# Combining all test and train related tables separately
test_data<-cbind(subject_test, y_test, test_data)
train_data<-cbind(subject_train, y_train, train_data)
# Data merge
merged_data<-rbind(test_data, train_data)
# Replacing activity codes with descriptive activity, and thus the final merge
from <- c(1,2,3,4,5,6)
to <- c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING")
gsub2 <- function(pattern, replacement, x, ...) {
for(i in 1:length(pattern))
x <- gsub(pattern[i], replacement[i], x, ...)
x
}
merged_data$activity <- gsub2(from, to, merged_data$activity)
# Finding headers with -mean() or -std() and selecting dataframe with only those headers. Also includes headers such as xxx-meanFreqxxx
headernames<-names(merged_data)
selected<-union(grep("-mean()", c(headernames)), grep("-std()", c(headernames)))
selectedData<-merged_data[,selected]
# Independent tidy data set with the average of each variable for each activity and each subject
library(data.table)
merged_data<-data.table(merged_data)
variables <- tail( names(merged_data), -2)
dataset_with_average<-merged_data[, lapply(.SD, mean), .SDcols=variables, by=list(subject_name, activity)]
getwd()
list.files()
setwd("/Users/administrator/Desktop/clean data/Getting-and-Cleaning-Data/UCI HAR Dataset")
list.files
list.files()
# Reading test data
test_data <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# Reading train data
train_data <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
# Reading labels and features
activity_labels <- read.table("activity_labels.txt")
features <- read.table("features.txt")
# Transposing rows of features to columns and assigning second row to header_names
header_names<-t(features)
header_names<-header_names[2,]
# Assiging header_names to both tables
names(test_data)<-c(header_names)
names(train_data)<-c(header_names)
# Assigning activity and subject_name as headers to the proper tables
names(y_test)<-"activity"
names(y_train)<-"activity"
names(subject_test)<-"subject_name"
names(subject_train)<-"subject_name"
# Combining all test and train related tables separately
test_data<-cbind(subject_test, y_test, test_data)
train_data<-cbind(subject_train, y_train, train_data)
# Data merge
merged_data<-rbind(test_data, train_data)
# Replacing activity codes with descriptive activity, and thus the final merge
from <- c(1,2,3,4,5,6)
to <- c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING")
gsub2 <- function(pattern, replacement, x, ...) {
for(i in 1:length(pattern))
x <- gsub(pattern[i], replacement[i], x, ...)
x
}
merged_data$activity <- gsub2(from, to, merged_data$activity)
# Finding headers with -mean() or -std() and selecting dataframe with only those headers. Also includes headers such as xxx-meanFreqxxx
headernames<-names(merged_data)
selected<-union(grep("-mean()", c(headernames)), grep("-std()", c(headernames)))
selectedData<-merged_data[,selected]
# Independent tidy data set with the average of each variable for each activity and each subject
library(data.table)
merged_data<-data.table(merged_data)
variables <- tail( names(merged_data), -2)
dataset_with_average<-merged_data[, lapply(.SD, mean), .SDcols=variables, by=list(subject_name, activity)]
View(dataset_with_average)
View(dataset_with_average)
tidy_data <- read.csv("~/Desktop/clean data/Getting-and-Cleaning-Data/tidy_data.txt")
View(tidy_data)
tidy_data <- read.table("~/Desktop/clean data/Getting-and-Cleaning-Data/tidy_data.txt", header=T, quote="\"")
View(tidy_data)
